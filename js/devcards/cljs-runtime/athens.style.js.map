{"version":3,"sources":["athens/style.cljs"],"mappings":";;;;AAMA,AAAA,AAAMA;AAAN,AAAA,AAAA,AAEU,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACC;;AAKX,AAAA,AAAMC;AAAN,AAAA,AAAA,AAGG,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAACD,AAQQ,AAAAE,AAAoB,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACC,AAAAA,AAAAA;;AAArB,AAAA,AAAAH,AAAAA,AAACC,AAAAA,AAAAA;AARV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA;;AAgBH,AAAA,AAAA,AAAAG,AAAMM;AAAN,AAAA,AAAAL,AAAA;AAAA,AAAA,AAAAC,AAAA,AAAA;AAAA,AAAA,AAAAC,AAAA;;AAAA,AAAA,AAAA,AAAAA,AAAAD;AAAA,AAAA,AAAAD,AAAA,AAAA,AAAAE;;AAAA,AAAA,AAAAA,AAAA;;;;AAAA;;;;AAAA,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAAH,AAAA,AAAA,AAAAI,AAAA,AAAAJ,AAAA,AAAA,AAAA,AAAA;AAAA,AAAA,AAAAK,AAAAF;;;AAAA,AAAA,AAAA,AAAA,AAAME,AACDI;AADL,AAEE;;;AAAA,AACM,AAAA,AAACC;;AACHC;AAFJ,AAGG,AAAA,AAACC,AAAOD,AAAa,AAAA,AAACE,AAAQC,AAAS,AAAA,AAACC,AAAwBN;;AAD/DE;;;;;AAAAA;;;;;;;;;;AAJN,AAAA,AAAA,AAAMN;;AAAN;AAAA,AAAA,AAAA,AAAAC,AAAMD;AAAN,AAAA,AAAAE,AAAA;AAAA,AAAA,AAAAA,AAAA,AAAAC,AAAAF;;;AAAA,AAQA,AAAA,AAAMU,AACHC;AADH,AAEE;;;AAAA,AACM,AAAA,AAACC;;AACHP;AAFJ,AAGG,AAAA,AAACC,AAAOD,AAAaQ,AAAMF;;AAD1BN;;;;;AAAAA;;;;;;;;;AAIN,AAoBA,AAAKS,AACH,AAAA,AAACC;AAGH,AAAKC,AACH,AAAA,AAACD;AAGH,AAAKE,AACH,AAAA,AAAA,AAAA,AAACP;AAKH,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKQ;AASL,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAKC;AAML,AAGA,AAAKC,AACH,AAAA,AAAA,AAACV,AAAwB,AAAAW,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACH,AAAAA,AAAAA;;AAE5B,AAAKI,AACH,AAAA,AAAA,AAACZ,AAAwB,AAAAa,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACL,AAAAA,AAAAA;;AAE5B,AAAKM,AACH,AAAA,AAAA,AAACd,AAAwB,AAAAe,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACP,AAAAA,AAAAA;;AAE5B,AAAKQ,AACH,AAAA,AAAA,AAAChB,AAAwB,AAAAiB,AAAA;AAAA,AAAA,AAAAA,AAAAA,AAACT,AAAAA,AAAAA","names":["athens.style/loading-css","garden.core.css.cljs$core$IFn$_invoke$arity$variadic","athens.style/main-css","G__67864","garden.selectors/&","G__67865","garden.selectors/nth-child","var_args","args__4795__auto__","len__4789__auto__","i__4790__auto__","argseq__4796__auto__","cljs.core/IndexedSeq","athens.style/with-classes","seq67866","self__4777__auto__","cljs.core/seq","css-classes","athens$style$f.cljs$core$IFn$_invoke$arity$1","attrs","cljs.core.update.cljs$core$IFn$_invoke$arity$4","cljs.core.partial.cljs$core$IFn$_invoke$arity$2","cljs.core/str","clojure.string.join.cljs$core$IFn$_invoke$arity$2","athens.style/with-style","css-styling","athens$style$with_style_$_f.cljs$core$IFn$_invoke$arity$1","cljs.core/merge","athens.style/+left-sidebar","athens.style.with_classes.cljs$core$IFn$_invoke$arity$variadic","athens.style/+pages-table","athens.style/+unknown-date","athens.style/COLORS","athens.style/OPACITIES","athens.style/+blue-bg","G__67867","athens.style/+red-bg","G__67868","athens.style/+orange-bg","G__67869","athens.style/+green-bg","G__67870"],"sourcesContent":["(ns athens.style\n  (:require\n   [garden.core :refer [css]]\n   [garden.selectors :refer [nth-child]]))\n\n;; Styles for the loading screen\n(defn loading-css\n  []\n  [:style (css\n           [:body {:font-family \"sans-serif\"\n                   :font-size \"1.3rem\"}])])\n\n;; Styles for the main app.\n(defn main-css\n  []\n  [:style\n   (css [:body {:font-family \"sans-serif\"}]\n        [:.pages-table\n         {:width \"60%\" :margin-top 20}\n         [:th {:font-weight \"bold\"\n               :min-width \"11em\"}]\n         [:td {:padding \"2px\"}]\n         [:tr\n          [:&\n           [(garden.selectors/& (nth-child :even)) {:background-color \"#e8e8e8\"}]]]\n         [:& {:border-spacing \"0\"}]]\n        [:.left-sidebar [:li {:padding-top \"0.27em\" :padding-bottom \"0.27em\"}]\n         {:padding 0\n          :margin 0\n          :list-style-type \"none\"}])])\n\n\n(defn with-classes\n  [& css-classes]\n  (fn f\n    ([] (f nil))\n    ([attrs]\n     (update attrs :class (partial str \" \") (clojure.string/join \" \" css-classes)))))\n\n\n(defn with-style\n  [css-styling]\n  (fn f\n    ([] (f nil))\n    ([attrs]\n     (update attrs :style merge css-styling))))\n\n\n(comment\n\n  ;; Combine with-classes and with-style\n  (def +heavily-styled\n    (comp\n     (with-classes \"strong\" \"happy\")\n     (with-style {:color :green})))\n\n  ;; Usage:\n\n\n  [:h1 (+heavily-styled) \"some statement\"]\n\n  [:h1 (+heavily-styled {:on-click (fn [_e] (js/alert \"something else\"))}) \"some statement\"])\n\n\n;; Functions that add styles to an element. Prefer to directly add styles when possible, otherwise\n;; use classes, and style above.\n\n\n(def +left-sidebar\n  (with-classes \"left-sidebar\"))\n\n\n(def +pages-table\n  (with-classes \"pages-table\"))\n\n\n(def +unknown-date\n  (with-style {:color \"#595959\"}))\n\n\n;;;;;;;;;;;;;;;; Style Guide ;;;;;;;;;;;;;;;;\n\n(def COLORS {:blue \"#0075E1\" ;; links          \n             :orange \"#F9A132\" ;; highlights\n             :red \"#D20000\" ;; warnings\n             :green \"#009E23\" ;; confirmation\n             :dark-gray \"#322F38\" ;; headings\n             :warm-gray \"#433F38\"  ;; body text\n             :ivory \"#EFEDEB\" ;; borders and panels\n             :white \"#FFFFFF\"})\n  \n(def OPACITIES {:100 1\n                :75 0.75\n                :50 0.5\n                :25 0.25\n                :1 0.1})\n\n(def HEADERS)\n\n;; Utilities\n(def +blue-bg\n  (with-style {:background (COLORS :blue)}))\n\n(def +red-bg\n  (with-style {:background (COLORS :red)}))\n\n(def +orange-bg\n  (with-style {:background (COLORS :orange)}))\n\n(def +green-bg\n  (with-style {:background (COLORS :green)}))"]}