{"version":3,"sources":["athens/page.cljs"],"mappings":"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","names":["athens.page/container-block","block-uid","cljs.core/deref","block","G__46998","re-frame.core/subscribe","athens.page/component-blocks","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__47000","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__47002","cljs.core/chunk-buffer","i__47001","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__46999","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","ch","map__47003","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__47006","uid","string","children","G__47005","G__47008","re-frame.core/dispatch","athens.parser/parse","athens.page/container-blocks","athens.page/linked-pattern","cljs.core/re-pattern","athens.page/unlinked-pattern","athens.page/block-container","id","node","G__47009","parents","G__47010","athens.page/block-component","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","b","map__47011","title","G__47013","or__4185__auto__","athens.page/node-page","linked-refs","G__47014","unlinked-refs","G__47015","s__47017","b__47019","i__47018","iter__47016","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","s__47021","b__47023","i__47022","iter__47020","athens.page/main","current-route","G__47024","G__47025","cljs.core/chunk-first"],"sourcesContent":["(ns athens.page\n  (:require [athens.parser :refer [parse]]\n            [reagent.core :as reagent]\n            [re-frame.core :refer [subscribe dispatch]]\n            [reitit.frontend.easy :as rfee]))\n\n(declare container-blocks component-blocks block-container block-component)\n\n(defn container-block [block-uid]\n  (fn [block-uid]\n    (let [block (subscribe [:block/children [:block/uid block-uid]])]\n      [component-blocks [@block]])))\n\n(defn component-blocks\n  [block]\n  [:div\n   (doall\n     (for [ch (:block/children block)]\n       (let [{:block/keys [uid string children]} ch]\n         ^{:key uid}\n         [:div\n          [:span.controls {:style {:margin-right 5 :cursor \"pointer\"}\n                           :on-click #(dispatch [:navigate :page {:id uid}])}\n           \"\u2022\"]\n          [:span (parse string)]\n          [:div {:style {:margin-left 20}}\n           [container-blocks uid]]])))])\n\n; match [[title]] or #title or #[[title]]\n(defn linked-pattern [string]\n  (re-pattern (str \"(\"\n                   \"\\\\[{2}\" string \"\\\\]{2}\"\n                   \"|\" \"#\" string\n                   \"|\" \"#\" \"\\\\[{2}\" string \"\\\\[{2}\"\n                   \")\")))\n\n; also excludes [title] :(\n(defn unlinked-pattern [string]\n  (re-pattern (str \"[^\\\\[|#]\" string)))\n\n(defn block-container [id]\n  (fn [id]\n    (let [node (subscribe [:node [:block/uid id]])\n          parents (subscribe [:block/_children2 [:block/uid id]])]\n      [block-component @node @parents])))\n\n(defn block-component\n  [node parents]\n  [:div\n   [:span {:style {:color \"gray\"} }\n    (interpose \" > \"\n               (map (fn [b]\n                      (let [{:block/keys [uid string] :node/keys [title]} b]\n                        ^{:key uid}\n                        [:span\n                         {:style {:cursor \"pointer\"}\n                          :on-click #(dispatch [:navigate :page {:id uid}])}\n                         (or string title)]))\n                    parents))]\n   [:h2 {:style {:margin 0}} (str \"\u2022 \" (:block/string node))]\n   [:div {:style {:margin-left 20}}\n    [container-block (:block/uid node)]]])\n\n(defn node-page [node]\n  (fn [node]\n    (let [linked-refs   (subscribe [:node/refs (linked-pattern   (:node/title node))])\n          unlinked-refs (subscribe [:node/refs (unlinked-pattern (:node/title node))])]\n      [:div\n       [:h2 (:node/title node)]\n       [container-block (:block/uid node)]\n       [:div\n        [:h3 \"Linked References\"]\n        [:div\n         (for [id (reduce into [] @linked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-component id]])]]\n       [:div\n        [:h3 \"Unlinked References\"]\n        [:div\n         (for [id (reduce into [] @unlinked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-component id]])]]\n       ])))\n\n(defn main []\n  (let [current-route (subscribe [:current-route])]\n    (fn []\n      (let [node (subscribe [:node [:block/uid (-> @current-route :path-params :id)]])]\n        [:div\n          [:h1 \"Page Panel\"]\n         (if (:node/title @node)\n           [node-page @node]\n           [block-component (:block/uid @node)])]))))\n"]}