{"version":3,"sources":["athens/page.cljs"],"mappings":"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","names":["athens.page/render-blocks","block-uid","block","G__50622","re-frame.core/subscribe","cljs.core.doall.cljs$core$IFn$_invoke$arity$1","iter__4582__auto__","s__50624","cljs.core/LazySeq","temp__5735__auto__","cljs.core/seq","cljs.core/chunked-seq?","c__4580__auto__","size__4581__auto__","cljs.core/count","b__50626","cljs.core/chunk-buffer","i__50625","cljs.core._nth.cljs$core$IFn$_invoke$arity$2","cljs.core/chunk-append","cljs.core/chunk-cons","cljs.core/chunk","iter__50623","cljs.core/chunk-rest","cljs.core/first","cljs.core/cons","cljs.core/rest","ch","cljs.core/deref","map__50648","cljs.core/PROTOCOL_SENTINEL","cljs.core.apply.cljs$core$IFn$_invoke$arity$2","cljs.core/hash-map","cljs.core.get.cljs$core$IFn$_invoke$arity$2","map__50693","uid","string","open","children","dbid","children?","cljs.core/not-empty","and__4174__auto__","athens.router/toggle-open","cljs.core/not","athens.router/navigate-page","athens.parse-renderer/parse-and-render","athens.page/block-page","id","node","G__50714","parents","G__50715","cljs.core.interpose.cljs$core$IFn$_invoke$arity$2","cljs.core.map.cljs$core$IFn$_invoke$arity$2","b","map__50716","title","or__4185__auto__","athens.page/enter-keycode","athens.page/esc-keycode","athens.page/title-comp","s","reagent.core.atom.cljs$core$IFn$_invoke$arity$1","save!","new-title","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$4","cljs.core/assoc","G__50765","re-frame.core/dispatch","cancel!","p1__50738#","p1__50747#","cljs.core._EQ_.cljs$core$IFn$_invoke$arity$2","_","p1__50750#","cljs.core.swap_BANG_.cljs$core$IFn$_invoke$arity$2","cljs.core.assoc.cljs$core$IFn$_invoke$arity$3","athens.page/node-page","linked-refs","G__50792","athens.patterns/linked","unlinked-refs","G__50793","athens.patterns/unlinked","s__50797","b__50799","i__50798","iter__50796","cljs.core.reduce.cljs$core$IFn$_invoke$arity$3","cljs.core/into","s__50804","b__50806","i__50805","iter__50803","athens.page/main","current-route","G__50834","G__50836","cljs.core/chunk-first"],"sourcesContent":["(ns athens.page\n  (:require\n    [athens.parse-renderer :refer [parse-and-render]]\n    [athens.patterns :as patterns]\n    [athens.router :refer [navigate-page toggle-open]]\n    [re-frame.core :refer [subscribe dispatch]]\n    [reagent.core :as reagent]\n    #_[reitit.frontend.easy :as rfee]))\n\n\n(defn render-blocks []\n  (fn [block-uid]\n    (let [block (subscribe [:block/children-sorted [:block/uid block-uid]])]\n      [:div {:class \"content-block\"}\n       (doall\n        (for [ch (:block/children @block)]\n          (let [{:block/keys [uid string open children] dbid :db/id} ch\n                children? (not-empty children)]\n            ^{:key uid}\n            [:div\n             [:div.block {:style {:display \"flex\"}}\n              [:div.controls {:style {:display \"flex\" :align-items \"flex-start\" :padding-top 5}}\n               (cond\n                 (and children? open) [:span.arrow-down {:style {:width        0 :height 0\n                                                                 :border-left  \"5px solid transparent\"\n                                                                 :border-right \"5px solid transparent\"\n                                                                 :border-top   \"5px solid black\"\n                                                                 :cursor \"pointer\"\n                                                                 :margin-top 4}\n                                                         :on-click #(toggle-open dbid open)}]\n                 (and children? (not open)) [:span.arrow-right {:style {:width        0 :height 0\n                                                                        :border-top  \"5px solid transparent\"\n                                                                        :border-bottom \"5px solid transparent\"\n                                                                        :border-left   \"5px solid black\"\n                                                                        :cursor \"pointer\"\n                                                                        :margin-right 4}\n                                                                :on-click #(toggle-open dbid open)}]\n                 :else [:span {:style {:width 10}}])\n               [:span {:style {:height         12 :width 12 :border-radius \"50%\" :margin-right 5\n                               :cursor         \"pointer\" :display \"flex\" :background-color (if (not open) \"lightgray\" nil)\n                               :vertical-align \"middle\" :align-items \"center\" :justify-content \"center\"}}\n                [:span.controls {:style    {:height         5 :width 5 :border-radius \"50%\"\n                                            :cursor         \"pointer\" :display \"inline-block\" :background-color \"black\"\n                                            :vertical-align \"middle\"}\n                                 :on-click #(navigate-page uid)}]]]\n              [:span (parse-and-render string)]]\n             (when open\n               [:div {:style {:margin-left 20}}\n                [render-blocks uid]])])))])))\n\n\n(defn block-page []\n  (fn [id]\n    (let [node (subscribe [:node [:block/uid id]])\n          parents (subscribe [:block/_children2 [:block/uid id]])]\n      [:div\n       [:span {:style {:color \"gray\"}}\n        (interpose \" > \"\n                   (map (fn [b]\n                          (let [{:block/keys [uid string] :node/keys [title]} b]\n                            ^{:key uid}\n                            [:span\n                             {:style {:cursor \"pointer\"}\n                              :on-click #(navigate-page uid)}\n                             (or string title)]))\n                        @parents))]\n       [:h2 {:style {:margin 0}}\n        (str \"\u2022 \" (:block/string @node))]\n       [:div {:style {:margin-left 20}}\n        [render-blocks (:block/uid @node)]]])))\n\n\n(def enter-keycode 13)\n(def esc-keycode 27)\n\n\n(defn title-comp [title]\n  (let [s (reagent/atom {:editing false\n                         :current-title title})\n        save! (fn [new-title]\n                (swap! s assoc :editing false)\n                (dispatch [:node/rename (:current-title @s) new-title]))\n        cancel! (fn [] (swap! s assoc :editing false))]\n    (fn [title]\n      (if (:editing @s)\n        [:input {:default-value title\n                 :auto-focus true\n                 :on-blur #(save! (-> % .-target .-value))\n                 :on-key-down #(cond\n                                 (= (.-keyCode %) enter-keycode)\n                                 (save! (-> % .-target .-value))\n\n                                 (= (.-keyCode %) esc-keycode)\n                                 (cancel!)\n\n                                 :else nil)}]\n        [:h2 {:on-click (fn [_] (swap! s #(-> %\n                                              (assoc :editing true)\n                                              (assoc :current-title title))))}\n         title]))))\n\n\n(defn node-page []\n  (fn [node]\n    (let [linked-refs   (subscribe [:node/refs (patterns/linked   (:node/title node))])\n          unlinked-refs (subscribe [:node/refs (patterns/unlinked (:node/title node))])]\n      [:div\n       [title-comp (:node/title node)]\n       [render-blocks (:block/uid node)]\n       [:div\n        [:h3 \"Linked References\"]\n        [:div\n         (for [id (reduce into [] @linked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]\n       [:div\n        [:h3 \"Unlinked References\"]\n        [:div\n         (for [id (reduce into [] @unlinked-refs)]\n           ^{:key id}\n           [:div {:style {:background-color \"lightblue\" :margin \"15px 0px\" :padding 5}}\n            [block-page id]])]]])))\n\n\n(defn main []\n  (let [current-route (subscribe [:current-route])]\n    (fn []\n      (let [node (subscribe [:node [:block/uid (-> @current-route :path-params :id)]])]\n        [:div\n          ;;[:h1 \"Page Panel\"]\n         (if (:node/title @node)\n           [node-page @node]\n           [block-page (:block/uid @node)])]))))\n"]}