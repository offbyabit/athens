{"version":3,"sources":["athens/parse_renderer.cljs"],"mappings":";;;;;;;AASA,AAAA,AAKA;;;AAAA,AAAMA,AAEHC;AAFH,AAGE,AAAAC,AAAA,AAAA,AACe;AAAOG;AAAP,AAEE,AAAMC,AAAmB,AAACC,AAAyBF;AAAnD,AACE,AAAA,AAAA,AAAA,AAAA,AAAA,AAACG,AAAgCF;;;AAH9BD;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AADtB,AAKe;AAAOI;AAAP,AACE,AAACC,AAAoBD;;;AADhBA;;;;AAAAA;;AAAAA;;;AAAAA;AAAAA;;;;;AALtB,AAOe,AAAKE;AAAL,AACE,AAAMC,AAAG,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAoCF;AAApC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGe,AAAA,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAA,AAAAC,AAAaJ,AACYD;AAZ/E,AAce,AAAKC;AAAL,AACE,AAAMK,AAAO,AAAAC,AAAA,AAAA,AAAA,AAAA,AAAsCN;AAAtC,AAAA,AAAAM,AAAAA,AAACJ,AAAAA,AAAAA;;AAAd,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAA,AAAA,AAACC,AAAqBH,AAAM,AAAAO,AAAkB,AAAA,AAAA,AAAAH,AAAgBC;AAAlC,AAAA,AAAAE,AAAAA,AAACC,AAAAA,AAAAA;;AAlB5D,AAmBe,AAAKC;AAAL,AACE,AAAMT,AAAG,AAAAU,AAAA,AAAA,AAAA,AAAA,AAAoCD;AAApC,AAAA,AAAAC,AAAAA,AAACR,AAAAA,AAAAA;;AAAV,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAGc,AAAA,AAAA,AAAA,AAACC,AAAqB,AAAA,AAAA,AAAAC,AAAaJ,AAC9C,AAAA,AAASS;AAxB7B,AAyBe,AAAKE;AAAL,AAAA,AAAA,AAAA,AAAA,AAAA,AAC2BA;;AA1B1CpB,AA2BEF;AA3BF,AAAA,AAAAC,AAAAC,AAAAD,AAAAC,AAACC,AAAAA,AAAAA;;AA8BH;;;AAAA,AAAMgB,AAEHH;AAFH,AAGE,AAAMO,AAAO,AAACC,AAAAA,AAAAA,AAAoBR,AAAAA;AAAlC,AACE,AAAI,AAACS,AAAeF;AAApB,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAAA,AAEW,AAACG,AAAO,AAACC,AAAkBJ,AAEnCP;;AAJH,AAAA,AAMG,AAACY,AAAI,AAAC7B,AAAUwB","names":["athens.parse-renderer/transform","tree","G__50330","G__50331","instaparse.core/transform","raw-contents","collapsed-contents","athens.parse-transform-helper/combine-adjacent-strings","cljs.core.concat.cljs$core$IFn$_invoke$arity$2","chars","clojure.string.join.cljs$core$IFn$_invoke$arity$1","title","id","G__50332","re-frame.core/subscribe","reitit.frontend.easy.href.cljs$core$IFn$_invoke$arity$2","cljs.core/deref","string","G__50333","G__50334","athens.parse-renderer/parse-and-render","tag-name","G__50337","text","result","athens.parser/block-parser","instaparse.core/failure?","cljs.core.pr_str.cljs$core$IFn$_invoke$arity$variadic","instaparse.core/get-failure","cljs.core/vec"],"sourcesContent":["(ns athens.parse-renderer\n  (:require\n    [athens.parse-transform-helper :refer [combine-adjacent-strings]]\n    [athens.parser :as parser]\n    [instaparse.core :as insta]\n    [re-frame.core :refer [subscribe]]\n    [reitit.frontend.easy :as rfee]))\n\n\n(declare parse-and-render)\n\n\n;; Instaparse transforming docs: https://github.com/Engelberg/instaparse#transforming-the-tree\n\n(defn transform\n  \"Transforms Instaparse output to Hiccup.\"\n  [tree]\n  (insta/transform\n    {:block      (fn [& raw-contents]\n                   ;; use combine-adjacent-strings to collapse individual characters from any-char into one string\n                   (let [collapsed-contents (combine-adjacent-strings raw-contents)]\n                     (concat [:span {:class \"block\"}] collapsed-contents)))\n     :any-chars  (fn [& chars]\n                   (clojure.string/join chars))\n     :block-link (fn [title]\n                   (let [id (subscribe [:block/uid [:node/title title]])]\n                     [:span {:class \"block-link\"}\n                      [:span {:style {:color \"gray\"}} \"[[\"]\n                      [:a {:href  (rfee/href :page {:id (:block/uid @id)})\n                           :style {:text-decoration \"none\" :color \"dodgerblue\"}} title]\n                      [:span {:style {:color \"gray\"}} \"]]\"]]))\n     :block-ref  (fn [id]\n                   (let [string (subscribe [:block/string [:block/uid id]])]\n                     [:span {:class \"block-ref\"\n                             :style {:font-size \"0.9em\" :border-bottom \"1px solid gray\"}}\n                      [:a {:href (rfee/href :page {:id id})} (parse-and-render (:block/string @string))]]))\n     :hashtag    (fn [tag-name]\n                   (let [id (subscribe [:block/uid [:node/title tag-name]])]\n                     [:a {:class \"hashtag\"\n                          :style {:color \"gray\" :text-decoration \"none\" :font-weight \"bold\"}\n                          :href  (rfee/href :page {:id (:block/uid @id)})}\n                      (str \"#\" tag-name)]))\n     :bold       (fn [text]\n                   [:strong {:class \"bold\"} text])}\n    tree))\n\n\n(defn parse-and-render\n  \"Converts a string of block syntax to Hiccup, with fallback formatting if it can\u2019t be parsed.\"\n  [string]\n  (let [result (parser/block-parser string)]\n    (if (insta/failure? result)\n      [:span\n       {:title (pr-str (insta/get-failure result))\n        :style {:color \"red\"}}\n       string]\n      [:span\n       (vec (transform result))])))\n"]}